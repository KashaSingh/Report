Report for the Date : 2023/11/14
Name : Kasha Singh
ITE No : ITE001456
Things I did today : 
1. Learnt about R tree data structure 
-> Creating index
-> Property
-> Used it for finding nearest neighbour
-> Optimized the code for RRT* using R tree

2. Optimized the code for search space in RRT*
Code:
  import numpy as np
  from rtree import index
  
  import sys
  sys.path.insert(0, "rrt-algorithms-develop")
  
  from src.utilities.geometry import es_points_along_line
  from src.utilities.obstacle_generation import obstacle_generator
  
  
  class SearchSpace(object):
      def __init__(self, dimension_lengths, O=None):
          """
          Initialize Search Space
          :param dimension_lengths: range of each dimension
          :param O: list of obstacles
          """
          # sanity check
          if len(dimension_lengths) < 2:
              raise Exception("Must have at least 2 dimensions")
          self.dimensions = len(dimension_lengths)  # number of dimensions
          # sanity checks
          if any(len(i) != 2 for i in dimension_lengths):
              raise Exception("Dimensions can only have a start and end")
          if any(i[0] >= i[1] for i in dimension_lengths):
              raise Exception("Dimension start must be less than dimension end")
          self.dimension_lengths = dimension_lengths  # length of each dimension
          p = index.Property()
          p.dimension = self.dimensions
          if O is None:
              self.obs = index.Index(interleaved=True, properties=p)
          else:
              # r-tree representation of obstacles
              # sanity check
              if any(len(o) / 2 != len(dimension_lengths) for o in O):
                  raise Exception("Obstacle has incorrect dimension definition")
              if any(o[i] >= o[int(i + len(o) / 2)] for o in O for i in range(int(len(o) / 2))):
                  raise Exception("Obstacle start must be less than obstacle end")
              self.obs = index.Index(obstacle_generator(O), interleaved=True, properties=p)
  
      def obstacle_free(self, x):
          """
          Check if a location resides inside of an obstacle
          :param x: location to check
          :return: True if not inside an obstacle, False otherwise
          """
          return self.obs.count(x) == 0
  
      def sample_free(self):
          """
          Sample a location within X_free
          :return: random location within X_free
          """
          while True:  # sample until not inside of an obstacle
              x = self.sample()
              if self.obstacle_free(x):
                  return x
  
      def collision_free(self, start, end, r):
          """
          Check if a line segment intersects an obstacle
          :param start: starting point of line
          :param end: ending point of line
          :param r: resolution of points to sample along edge when checking for collisions
          :return: True if line segment does not intersect an obstacle, False otherwise
          """
          points = es_points_along_line(start, end, r)
          coll_free = all(map(self.obstacle_free, points))
          return coll_free
  
      def sample(self):
          """
          Return a random location within X
          :return: random location within X (not necessarily X_free)
          """
          x = np.random.uniform(self.dimension_lengths[:, 0], self.dimension_lengths[:, 1])
          return tuple(x)


3. Used plotting functions in python to visualize the optimal path
-> Analyzed how the position of obstacles affects the optimal path

Code:
import plotly as py
from plotly import graph_objs as go

colors = ['darkblue', 'teal']


class Plot(object):
    def __init__(self, filename):
        """
        Create a plot
        :param filename: filename
        """
        self.filename = "../../output/visualizations/" + filename + ".html"
        self.data = []
        self.layout = {'title': 'Plot',
                       'showlegend': False
                       }

        self.fig = {'data': self.data,
                    'layout': self.layout}

    def plot_tree(self, X, trees):
        """
        Plot tree
        :param X: Search Space
        :param trees: list of trees
        """
        if X.dimensions == 2:  # plot in 2D
            self.plot_tree_2d(trees)
        elif X.dimensions == 3:  # plot in 3D
            self.plot_tree_3d(trees)
        else:  # can't plot in higher dimensions
            print("Cannot plot in > 3 dimensions")

    def plot_tree_2d(self, trees):
        """
        Plot 2D trees
        :param trees: trees to plot
        """
        for i, tree in enumerate(trees):
            for start, end in tree.E.items():
                if end is not None:
                    trace = go.Scatter(
                        x=[start[0], end[0]],
                        y=[start[1], end[1]],
                        line=dict(
                            color=colors[i]
                        ),
                        mode="lines"
                    )
                    self.data.append(trace)

    def plot_tree_3d(self, trees):
        """
        Plot 3D trees
        :param trees: trees to plot
        """
        for i, tree in enumerate(trees):
            for start, end in tree.E.items():
                if end is not None:
                    trace = go.Scatter3d(
                        x=[start[0], end[0]],
                        y=[start[1], end[1]],
                        z=[start[2], end[2]],
                        line=dict(
                            color=colors[i]
                        ),
                        mode="lines"
                    )
                    self.data.append(trace)

    def plot_obstacles(self, X, O):
        """
        Plot obstacles
        :param X: Search Space
        :param O: list of obstacles
        """
        if X.dimensions == 2:  # plot in 2D
            self.layout['shapes'] = []
            for O_i in O:
                # noinspection PyUnresolvedReferences
                self.layout['shapes'].append(
                    {
                        'type': 'rect',
                        'x0': O_i[0],
                        'y0': O_i[1],
                        'x1': O_i[2],
                        'y1': O_i[3],
                        'line': {
                            'color': 'purple',
                            'width': 4,
                        },
                        'fillcolor': 'purple',
                        'opacity': 0.70
                    },
                )
        elif X.dimensions == 3:  # plot in 3D
            for O_i in O:
                obs = go.Mesh3d(
                    x=[O_i[0], O_i[0], O_i[3], O_i[3], O_i[0], O_i[0], O_i[3], O_i[3]],
                    y=[O_i[1], O_i[4], O_i[4], O_i[1], O_i[1], O_i[4], O_i[4], O_i[1]],
                    z=[O_i[2], O_i[2], O_i[2], O_i[2], O_i[5], O_i[5], O_i[5], O_i[5]],
                    i=[7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
                    j=[3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
                    k=[0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
                    color='purple',
                    opacity=0.70
                )
                self.data.append(obs)
        else:  # can't plot in higher dimensions
            print("Cannot plot in > 3 dimensions")

    def plot_path(self, X, path):
        """
        Plot path through Search Space
        :param X: Search Space
        :param path: path through space given as a sequence of points
        """
        if X.dimensions == 2:  # plot in 2D
            x, y = [], []
            for i in path:
                x.append(i[0])
                y.append(i[1])
            trace = go.Scatter(
                x=x,
                y=y,
                line=dict(
                    color="red",
                    width=4
                ),
                mode="lines"
            )

            self.data.append(trace)
        elif X.dimensions == 3:  # plot in 3D
            x, y, z = [], [], []
            for i in path:
                x.append(i[0])
                y.append(i[1])
                z.append(i[2])
            trace = go.Scatter3d(
                x=x,
                y=y,
                z=z,
                line=dict(
                    color="red",
                    width=4
                ),
                mode="lines"
            )

            self.data.append(trace)
        else:  # can't plot in higher dimensions
            print("Cannot plot in > 3 dimensions")

    def plot_start(self, X, x_init):
        """
        Plot starting point
        :param X: Search Space
        :param x_init: starting location
        """
        if X.dimensions == 2:  # plot in 2D
            trace = go.Scatter(
                x=[x_init[0]],
                y=[x_init[1]],
                line=dict(
                    color="orange",
                    width=10
                ),
                mode="markers"
            )

            self.data.append(trace)
        elif X.dimensions == 3:  # plot in 3D
            trace = go.Scatter3d(
                x=[x_init[0]],
                y=[x_init[1]],
                z=[x_init[2]],
                line=dict(
                    color="orange",
                    width=10
                ),
                mode="markers"
            )

            self.data.append(trace)
        else:  # can't plot in higher dimensions
            print("Cannot plot in > 3 dimensions")

    def plot_goal(self, X, x_goal):
        """
        Plot goal point
        :param X: Search Space
        :param x_goal: goal location
        """
        if X.dimensions == 2:  # plot in 2D
            trace = go.Scatter(
                x=[x_goal[0]],
                y=[x_goal[1]],
                line=dict(
                    color="green",
                    width=10
                ),
                mode="markers"
            )

            self.data.append(trace)
        elif X.dimensions == 3:  # plot in 3D
            trace = go.Scatter3d(
                x=[x_goal[0]],
                y=[x_goal[1]],
                z=[x_goal[2]],
                line=dict(
                    color="green",
                    width=10
                ),
                mode="markers"
            )

            self.data.append(trace)
        else:  # can't plot in higher dimensions
            print("Cannot plot in > 3 dimensions")

    def draw(self, auto_open=True):
        """
        Render the plot to a file
        """
        py.offline.plot(self.fig, filename=self.filename, auto_open=auto_open)
